plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id 'org.spongepowered.mixin' version "0.7-SNAPSHOT" apply(false)
}
allprojects {
    apply plugin: 'java'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.release = 17
    }
}

subprojects {
    apply plugin: 'java'
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    jar {
        from(rootProject.file("LICENSE"))
        from(rootProject.file("README.md"))
        from(rootProject.file('files/changelog.txt'))
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE"))
        from(rootProject.file("README.md"))
        from(rootProject.file('files/changelog.txt'))
    }

    repositories {
        mavenCentral()
        mavenLocal()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            // Patchouli && Provider
            name = 'BlameJared Maven (CrT / Bookshelf / JEI (Newer) / vazkii / xyz)'
            url = 'https://maven.blamejared.com'
        }
        
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org/'
        }

        maven {
            name = "TerraformersMC (Trinkets)"
            url = "https://maven.terraformersmc.com/"
        }

        maven {
            name = "Ladysnake Libs"
            url = "https://maven.ladysnake.org/releases"
        }

        maven {
            // location of the maven that hosts Mantle and JEI files
            name = "JEI"
            url "https://dvs1.progwml6.com/files/maven/"
        }

        maven {
            name = "Curse Maven"
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }

        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }

        maven {
            name = "C4's Maven"
            url = "https://maven.theillusivec4.top/"
        }

        maven { // Flywheel
            url = "https://maven.tterrag.com/"
            content {
                // need to be specific here due to version overlaps
                includeGroup("com.jozufozu.flywheel")
            }
        }

        if (project.hasProperty('localmaven')) {
            maven {
                url "file://" + localmaven
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        it.enabled = false
    }

    tasks.withType(Jar).all {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}
