buildscript {
    repositories {
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'parchment'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content {
                includeGroup "org.spongepowered"
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.8'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.modrinth.minotaur'

repositories {
    maven {
        // location of the maven that hosts Mantle and JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Patchouli && Provider
        name = "Blame Jared"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "Geckolib"
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    flatDir {
        dirs 'libs'
    }
}

group = 'com.github.wendall911.homeostatic'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file("run").canonicalPath
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                homeostatic {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', "${modid}",
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources')

            mods {
                homeostatic {
                    source sourceSets.main
                }
            }
        }

    }    
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    implementation fg.deobf("curse.maven:sereneseasons-291874:${serene_seasons_version}")
    implementation fg.deobf("curse.maven:biomesoplenty-220318:${bop_version}")
    implementation fg.deobf("curse.maven:terrablender-563928:${terrablender_version}")
    implementation fg.deobf("curse.maven:byg-247560:${byg_version}")
    runtimeOnly fg.deobf("curse.maven:corgilib-693313:${corgilib_version}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    //compileOnly fg.deobf("curse.maven:create-328085:${create_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}-FORGE")
    implementation fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}")

    if (System.getenv('DATA_GEN') != null) {
        //runtimeOnly fg.deobf("curse.maven:create-328085:${create_version}")
    }
    else {
        runtimeOnly fg.deobf("curse.maven:simpletextoverlay-321283:${simpletextoverlay_version}")
        runtimeOnly fg.deobf("curse.maven:configured-457570:4462839")
        //runtimeOnly fg.deobf("curse.maven:botania-225643:???")
        //runtimeOnly fg.deobf("curse.maven:curios-309927:4523020")
        //runtimeOnly fg.deobf("curse.maven:croptopia-415438:4512807")
        //runtimeOnly fg.deobf("curse.maven:farmers_delight-398521:???")
        //runtimeOnly fg.deobf("curse.maven:xerca-341575:???")
        //runtimeOnly fg.deobf("curse.maven:morecraft-59648:???")
        //runtimeOnly fg.deobf("curse.maven:sophisticated_core-618298:???")
        //runtimeOnly fg.deobf("curse.maven:sophisticated_backpacks-422301:???")
        //runtimeOnly fg.deobf("curse.maven:ecologics-570463:???")
        //runtimeOnly fg.deobf("curse.maven:sprout-565856:???")
        //runtimeOnly fg.deobf("curse.maven:arsnouveau-401955:???")
        //runtimeOnly fg.deobf("curse.maven:create-328085:${create_version}")
        //runtimeOnly fg.deobf("curse.maven:create_cafe-542235:???")
        //runtimeOnly fg.deobf("curse.maven:kiwi-303657:???")
        //runtimeOnly fg.deobf("curse.maven:fruittrees-355467:???")
        //runtimeOnly fg.deobf("curse.maven:puzzleslib-495476:4582313")
        //runtimeOnly fg.deobf("curse.maven:leavemybarsalone-281715:4555067")
        //runtimeOnly fg.deobf("curse.maven:scuba_gear-399090:4442000")
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${archiveVersion}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"

    config "${modid}.mixins.json"
    debug = true
    debug.verbose = true
    debug.export = true
    checks = true
    checks.interfaces = true
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version, 'minecraft_version_range': minecraft_version_range, 'forge_version_range': forge_version_range, "loader_version": loader_version
    }
    it.into "$buildDir/resources/main/"
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("./files/templates/") {
        include 'updates.json'
        expand 'version': version
    }

    it.into 'files/'
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure {
        finalizedBy(replaceResources)
        finalizedBy(updates)
    }
}

jar.finalizedBy('reobfJar', 'signJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

curseforge {
    if (project.hasProperty('hscurseApiKey')) {
        apiKey = project.hscurseApiKey
        project {
            id = project.hscurseId
            changelog = file('build/libs/' + project.getName() + '-' + version + '-changelog.txt')
            releaseType = cf_release_type
            addGameVersion('Forge')
            "${cf_versions}".split(',').each {
                addGameVersion "${it}"
            }
            mainArtifact(jar) {
                relations {
                    optionalLibrary 'configured'
                    optionalLibrary 'catalogue'
                    optionalLibrary 'jei'
                    optionalLibrary 'simpletextoverlay'
                    optionalLibrary 'serene-seasons'
                    optionalLibrary 'biomes-o-plenty'
                    optionalLibrary 'oh-the-biomes-youll-go'
                    optionalLibrary 'croptopia'
                    optionalLibrary 'farmers-delight'
                    optionalLibrary 'xercamod'
                    optionalLibrary 'kitteh6660s-morecraft'
                    optionalLibrary 'sophisticated-backpacks'
                    optionalLibrary 'ecologics'
                    optionalLibrary 'ars-nouveau'
                    optionalLibrary 'sprout'
                    optionalLibrary 'create-cafe'
                    optionalLibrary 'fruit-trees'
                    optionalLibrary 'leave-my-bars-alone'
                    optionalLibrary 'create'
                    optionalLibrary 'patchouli'
                    optionalLibrary 'scuba-gear'
                }
            }
        }
    }
}

tasks.curseforge.dependsOn build

modrinth {
    if (project.hasProperty('hsModrinthId')) {
        token = project.modrinthKey
        projectId = project.hsModrinthId
        version = getVersion()
        versionType = "${cf_release_type}"
        changelog = file('build/libs/' + project.getName() + '-changelog.txt').text
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        dependencies {
			optional.project "create"
			optional.project "ecologics"
			optional.project "create-cafe"
			optional.project "scuba-gear"
			optional.project "farmers-delight"
			optional.project "xercamod"
			optional.project "leave-my-bars-alone"
			optional.project "sprout"
			optional.project "patchouli"
			optional.project "jei"
			optional.project "biomesyougo"
        }
    }
}

tasks.modrinth.dependsOn build

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File('build/libs/' + project.getName() + '-changelog.txt');
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${last_mod_version}";
}

tasks.build.dependsOn('changelog')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE'
    }

    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'

    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}
